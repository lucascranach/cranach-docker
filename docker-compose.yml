services:
  reverse-proxy:
    container_name: reverse-proxy
    image: nginx
    environment:
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
      - DOMAIN=${DOMAIN}
    ports:
      - ${REVERSE_PROXY_PORT}:${REVERSE_PROXY_PORT}
    networks: ['cranach-network']
    volumes:
      - ./nginx-config/dev/templates/:/etc/nginx/templates/
      - ./nginx-config/:/nginx-config/
      - ./nginx-config/auth/.htpasswd:/etc/nginx/.htpasswd:ro
    depends_on:
     - api
  elasticsearch:
    container_name: cranach-es
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELASTIC_VERSION
    environment:
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - xpack.security.enabled=$ELASTIC_SECURITY
      - discovery.type=single-node
    networks:
      - cranach-network
    volumes:
      - ${PATH_ES_DATA}:/var/lib/elasticsearch/
  kibana:
    container_name: cranach-kibana
    image: docker.elastic.co/kibana/kibana:$ELASTIC_VERSION
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=$ELASTIC_PASSWORD
      - ELASTIC_URL=http://cranach-es:9200
    networks:
      - cranach-network
    links: ['elasticsearch']
    volumes:
       - ./kibana.yml:/usr/share/kibana/config/kibana.yml      
    depends_on: ['elasticsearch']
  api:
    build: ${PATH_API}
    command: nodemon app.js
    container_name: cranach-api
    environment: 
      - NODE_PORT=${NODE_PORT}
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=$ELASTIC_PASSWORD
      - ELASTICSEARCH_INDICES_PREFIX=$ELASTIC_INDICES_PREFIX
      - API_USERNAME=$API_USERNAME
      - API_PASSWORD=$API_PASSWORD
      - MONGO_DB_CONNECTION_STRING=${MONGO_DB_CONNECTION_STRING}
      - MONGO_DB_PASSWORD=${MONGO_DB_PASSWORD}
      - SESSION_EXPIRY=${SESSION_EXPIRY}
      - JWT_SECRET=${JWT_SECRET}
    image: cranach-api
    volumes:
      - ${PATH_API}/src:/usr/src/app
      - /usr/src/app/node_modules
      - ${PATH_API_FILTER_ASSETS}:/usr/src/app/server/assets/filters
    depends_on:
       - elasticsearch
    networks:
      - cranach-network
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - cranach-network
    environment:
      - DOMAIN=${DOMAIN}
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    depends_on: ['elasticsearch'] 
  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - cranach-network
  alertmanager:
    build:
      context: ./alertmanager
    container_name: alertmanager
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - ./alertmanager/:/etc/alertmanager
      - alertmanager-data:/alertmanager-data
      - alertmanager-config:/alertmanager-config
    networks:
      - cranach-network
  elasticsearch-exporter:
    image: quay.io/prometheuscommunity/elasticsearch-exporter:latest
    container_name: elasticsearch-exporter
    networks:
      - cranach-network
    command:
      '--es.uri=http://elastic:password@cranach-es:9200'
    depends_on: ['elasticsearch']
    restart: always
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    networks:
      - cranach-network
    pid: "host"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'      
  # mongodb:
  #   container_name: cranach-mongo-db
  #   image: mongo
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGO_DB_USERNAME}
  #     - MONGO_INITDB_DATABASE=admin
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DB_PASSWORD}
  #     - MONGO_DB_USERNAME=${MONGO_DB_USERNAME}
  #     - MONGO_DB_PASSWORD=${MONGO_DB_PASSWORD}
  #     - MONGO_DB_DATABASE=${MONGO_DB_DATABASE}
  #   ports:
  #     - '27017:27017'
  #   networks: ['cranach-network']
  #   volumes:
  #     - ${PATH_MONGO_DATA}/:/data/db
  #     - ./docker-entrypoint-initdb.d/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
  # mongo-express:
  #   container_name: mongo-express
  #   image: mongo-express
  #   depends_on:
  #     - mongodb
  #   environment:
  #     - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_DB_USERNAME}
  #     - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_DB_PASSWORD}
  #     - ME_CONFIG_MONGODB_SERVER=cranach-mongo-db
  #     - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
  #     - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
  #   restart: unless-stopped
  #   ports:
  #     - '8081:8081'
  #   networks: ['cranach-network']
networks: 
  cranach-network:
    driver: bridge
volumes:
  grafana-data:
  prometheus-data:
  alertmanager-data:
  alertmanager-config:
